// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <pic.h>
#include <pic16f877a.h>
#include "lcd_interface.h"
#include "uart_interface.h"
#include "adc_interface.h"
#include "tmr0_interface.h"


#define _XTAL_FREQ 20000000




void system_init(void){

    TRISB1 = 0; TRISB2 = 0; TRISB3 = 0; TRISB4 = 0; TRISB5 = 0; TRISD7 = 0;
    TRISA0 = 1; 
    TRISA1 = 1;
    TRISB0 = 1; 

    lcd_init(); // This will initialize the lcd
    TMR0_Initialize();
    adc_init();
    uart_init();

}


int main (void)
{
    system_init();
    
    lcd_cmd(0x01);
    lcd_cmd(0x80);
    lcd_string("Hello");
    __delay_ms(1000);
    lcd_cmd(0x01);
    __delay_ms(1000);
    
    while (1) {      
        __delay_ms(500);
        uart_write(5);
        uart_write(1);
        __delay_ms(500);
        uart_write(4);
        uart_write(2);
    }
    return 0;
}