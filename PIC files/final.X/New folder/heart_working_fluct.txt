#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "tmr0_interface.h"
#include "adc_interface.h"
#include "lcd_interface.h"
#include "tmr0_interface.h"

#define _XTAL_FREQ 20000000


int main_state = -1;
int adc_value = 0;
int adc_value1 = 0;

int tune = 0;



sys_init()
{
    TRISD7 = 0; TRISB1 = 0; TRISB1 = 0; TRISB2 = 0; TRISB3 = 0; TRISB4 = 0; TRISB5 = 0;
    TRISA0 = 1;
    
    lcd_init();
    //uart_init();
    adc_init();
        
    TMR0_Initialize();
    TMR0_StartTimer();
    INTERRUPT_GlobalInterruptEnable();
    INTERRUPT_PeripheralInterruptEnable();   
    
}
void main(void) {
    
    float adcT;
    float volt, temp;
    int temp1,c1,c2,c3,c4;

    sys_init();
    lcd_cmd(0x01);
    lcd_cmd(0x80);
    lcd_string("HELLO!!!");
    __delay_ms(1000);
    lcd_cmd(0x01);
    
    while (1)
    {
       switch (main_state) {
            case READ_ADC:
            {                
                adc_value = adc_read(0);
                main_state = CALCULATE_HEART_BEAT;                
                break;
            }
            case CALCULATE_HEART_BEAT:
            {
                calculate_heart_beat(adc_value);
                main_state = SHOW_HEART_BEAT;
                break;
            }
            case SHOW_HEART_BEAT:
            {
                if (QS == true) { // A Heartbeat Was Found
                    // BPM and IBI have been Determined
                    // Quantified Self "QS" true when arduino finds a heartbeat                    
                    QS = false; // reset the Quantified Self flag for next time
                    // 0.9 used for getting better data. actually should not b used
                    //BPM = BPM * 0.9;
                   // IBI = IBI / 0.9;                    
                    //IBI = IBI * 2;
                   // tune = BPM / 2;
                    //lcd_com(0x01);                    
                    lcd_cmd(0x80);                  
                    lcd_string("BPM:-     ");
                    lcd_number(BPM);
                    lcd_string (" ");
                    lcd_cmd(0xC0);
          
                }

            }


                main_state = IDLE;

                break;

        

        case IDLE:

        {            

            break;

        }

        default:

        {


        }

    }
    }
    return;
}

void timer_isr() {
    main_state = READ_ADC;    
}


void __interrupt() INTERRUPT_InterruptManager (void)
{
    // interrupt handler
    if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
    {
        TMR0_ISR();
    }
}